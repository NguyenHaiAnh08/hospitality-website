{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/danny/Desktop/EnSoft/File%20B%C3%A0i%20T%E1%BA%ADp/%C4%91%E1%BB%93%20%C3%A1n%20th%E1%BB%B1c%20t%E1%BA%ADp%20l%E1%BA%ADp%20tr%C3%ACnh%20A/hospitality-website/my-app/src/app/services/axios.customize.service.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // Đổi lại nếu BE chạy port khác hoặc deploy\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Nếu BE dùng cookie/session\r\n  timeout: 10000, // 10 second timeout\r\n});\r\n\r\n// Add request interceptor for logging\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`[API Request] ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('[API Request Error]', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for logging\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`[API Response] ${response.status} ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response) {\r\n      console.error(`[API Error] ${error.response.status} ${error.config?.url}:`, error.response.data);\r\n    } else if (error.request) {\r\n      console.error('[API Error] No response received:', error.request);\r\n    } else {\r\n      console.error('[API Error] Request setup error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACjC,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;IACA,iBAAiB;IACjB,SAAS;AACX;AAEA,sCAAsC;AACtC,cAAc,YAAY,CAAC,OAAO,CAAC,GAAG,CACpC,CAAC;IACC,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,OAAO,MAAM,EAAE,cAAc,CAAC,EAAE,OAAO,GAAG,EAAE;IACzE,OAAO;AACT,GACA,CAAC;IACC,QAAQ,KAAK,CAAC,uBAAuB;IACrC,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGF,uCAAuC;AACvC,cAAc,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrC,CAAC;IACC,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE;IACtE,OAAO;AACT,GACA,CAAC;IACC,IAAI,MAAM,QAAQ,EAAE;QAClB,QAAQ,KAAK,CAAC,CAAC,YAAY,EAAE,MAAM,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,MAAM,EAAE,IAAI,CAAC,CAAC,EAAE,MAAM,QAAQ,CAAC,IAAI;IACjG,OAAO,IAAI,MAAM,OAAO,EAAE;QACxB,QAAQ,KAAK,CAAC,qCAAqC,MAAM,OAAO;IAClE,OAAO;QACL,QAAQ,KAAK,CAAC,oCAAoC,MAAM,OAAO;IACjE;IACA,OAAO,QAAQ,MAAM,CAAC;AACxB;uCAGa","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/danny/Desktop/EnSoft/File%20B%C3%A0i%20T%E1%BA%ADp/%C4%91%E1%BB%93%20%C3%A1n%20th%E1%BB%B1c%20t%E1%BA%ADp%20l%E1%BA%ADp%20tr%C3%ACnh%20A/hospitality-website/my-app/src/app/services/api.service.ts"],"sourcesContent":["import axiosInstance from './axios.customize.service';\r\n\r\n// Đăng nhập\r\nexport const login = async (email: string, password: string) => {\r\n  const response = await axiosInstance.post('/users/login', { email, password });\r\n  return response.data;\r\n};\r\n\r\n// Lấy danh sách thuốc (cần token)\r\nexport const getMedicines = async (token: string) => {\r\n  const response = await axiosInstance.get('/medicines', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Get a specific medicine by ID\r\nexport const getMedicineById = async (medicineId: string, token: string) => {\r\n  console.log(`API Call: getMedicineById for id: ${medicineId}`);\r\n  try {\r\n    const response = await axiosInstance.get(`/medicines/${medicineId}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log(`API Response: Found medicine with name: ${response.data.name}`);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(`API Error: getMedicineById failed for id ${medicineId}:`, error.response?.data || error.message);\r\n    console.error('Error response status:', error.response?.status);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new medicine\r\nexport const createMedicine = async (medicineData: any, token: string) => {\r\n  const response = await axiosInstance.post('/medicines', medicineData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Update an existing medicine\r\nexport const updateMedicine = async (medicineId: string, medicineData: any, token: string) => {\r\n  const response = await axiosInstance.put(`/medicines/${medicineId}`, medicineData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Delete a medicine\r\nexport const deleteMedicine = async (medicineId: string, token: string) => {\r\n  const response = await axiosInstance.delete(`/medicines/${medicineId}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Appointments API methods\r\nexport const getAppointments = async (token: string) => {\r\n  const response = await axiosInstance.get('/appointments', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const createAppointment = async (appointmentData: any, token: string) => {\r\n  const response = await axiosInstance.post('/appointments', appointmentData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const updateAppointment = async (appointmentId: string, appointmentData: any, token: string) => {\r\n  const response = await axiosInstance.put(`/appointments/${appointmentId}`, appointmentData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const deleteAppointment = async (appointmentId: string, token: string) => {\r\n  const response = await axiosInstance.delete(`/appointments/${appointmentId}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Patient/User API methods\r\nexport const createUser = async (userData: any, token: string) => {\r\n  const response = await axiosInstance.post('/users', userData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const updateUser = async (userId: string, userData: any, token: string) => {\r\n  const response = await axiosInstance.put(`/users/${userId}`, userData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getUsers = async (token: string) => {\r\n  const response = await axiosInstance.get('/users', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getUserById = async (userId: string, token: string) => {\r\n  const response = await axiosInstance.get(`/users/${userId}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Lấy danh sách bệnh nhân từ API\r\nexport const getPatients = async (token: string) => {\r\n  try {\r\n    // Kiểm tra token trước khi gửi request\r\n    if (!token) {\r\n      console.error('No authentication token provided for getPatients request');\r\n      throw new Error('Authentication token is required');\r\n    }\r\n\r\n    // Log token để debug (chỉ hiện 10 ký tự đầu để đảm bảo an toàn)\r\n    console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\r\n\r\n    let patients = [];\r\n    \r\n    // Trước tiên, thử lấy role của người dùng hiện tại\r\n    const meResponse = await axiosInstance.get('/users/me', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    \r\n    const currentUser = meResponse.data;\r\n    console.log('Current user role:', currentUser.role);\r\n    \r\n    // Thử sử dụng endpoint mới dành cho tất cả nhân viên y tế\r\n    if (['ADMIN', 'DOCTOR', 'RECEPTIONIST', 'PHARMACIST'].includes(currentUser.role)) {\r\n      console.log(`${currentUser.role} user detected, using dedicated patient endpoint`);\r\n      try {\r\n        // Sử dụng endpoint /users/patients mới đã tạo\r\n        const response = await axiosInstance.get('/users/patients', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        \r\n        patients = response.data;\r\n        console.log(`Successfully fetched ${patients.length} patients using /users/patients endpoint`);\r\n        return patients;\r\n      } catch (error: any) {\r\n        console.error(`Error fetching patients for ${currentUser.role}:`, error);\r\n        \r\n        // Nếu endpoint mới chưa được triển khai, thử dùng cách thức cũ\r\n        if (error.response && error.response.status === 404) {\r\n          console.warn('The /users/patients endpoint may not exist yet, falling back to other methods');\r\n        } else {\r\n          throw error; // Re-throw for other types of errors\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Nếu là ADMIN và endpoint /users/patients không hoạt động, thử dùng /users\r\n    if (currentUser.role === 'ADMIN') {\r\n      console.log('Admin user detected, falling back to /users endpoint');\r\n      try {\r\n        const response = await axiosInstance.get('/users', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        \r\n        patients = response.data.filter((user: any) => user.role === 'PATIENT');\r\n        console.log(`Successfully fetched ${patients.length} patients by filtering all users`);\r\n        return patients;\r\n      } catch (error: any) {\r\n        console.error('Error fetching all users as ADMIN:', error);\r\n        throw error;\r\n      }\r\n    } else {\r\n      // Nếu không có quyền và không có endpoint phù hợp\r\n      console.warn(`User role ${currentUser.role} may not have sufficient permissions`);\r\n      throw new Error(`Insufficient permissions: ${currentUser.role} cannot fetch patients`);\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error fetching patients from API:', error.message);\r\n    \r\n    // Log thêm chi tiết về lỗi để debug\r\n    if (error.response) {\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response data:', error.response.data);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Kiểm tra tính hợp lệ của token\r\nexport const validateToken = async (token: string) => {\r\n  console.log('Validating token (first 10 chars):', token.substring(0, 10) + '...');\r\n  try {\r\n    // Gọi một endpoint đơn giản để kiểm tra token có hợp lệ không\r\n    const response = await axiosInstance.get('/users/validate-token', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('Token validation successful, user data:', response.data);\r\n    \r\n    // Get detailed user info to check role\r\n    try {\r\n      const meResponse = await axiosInstance.get('/users/me', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      console.log('Current user role from /users/me:', meResponse.data?.role);\r\n      return { valid: true, data: meResponse.data || response.data };\r\n    } catch (meError) {\r\n      console.error('Failed to get additional user info:', meError);\r\n      return { valid: true, data: response.data };\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Token validation error:', error);\r\n    console.error('Error response status:', error.response?.status);\r\n    console.error('Error response data:', error.response?.data);\r\n    \r\n    if (error.response && error.response.status === 401) {\r\n      // Token không hợp lệ hoặc đã hết hạn\r\n      return { valid: false, reason: 'expired' };\r\n    } else if (error.response && error.response.status === 403) {\r\n      // Token hợp lệ nhưng không có quyền\r\n      return { valid: true, reason: 'insufficient_permissions' };\r\n    }\r\n    \r\n    return { valid: false, reason: 'unknown', error };\r\n  }\r\n};\r\n\r\n// Queue API methods\r\nexport const getQueues = async (token: string) => {\r\n  const response = await axiosInstance.get('/queues', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getQueuesByDoctor = async (token: string, status?: string) => {\r\n  const url = status ? `/queues/doctor?status=${status}` : '/queues/doctor';\r\n  const response = await axiosInstance.get(url, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getQueuesWithPatients = async (token: string) => {\r\n  const response = await axiosInstance.get('/queues/with-patients', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const getQueuesByStatus = async (status: string, token: string) => {\r\n  const response = await axiosInstance.get(`/queues/status/${status}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const createQueue = async (patientId: string, token: string, notes?: string) => {\r\n  const response = await axiosInstance.post('/queues', \r\n    { \r\n      patientId,\r\n      status: 'waiting',\r\n      notes\r\n    },\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const updateQueueStatus = async (queueId: string, token: string, status: string, doctorId?: string, notes?: string) => {\r\n  const response = await axiosInstance.put(`/queues/${queueId}`, \r\n    { \r\n      status,\r\n      doctorId,\r\n      notes\r\n    },\r\n    {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    }\r\n  );\r\n  return response.data;\r\n};\r\n\r\nexport const deleteQueue = async (queueId: string, token: string) => {\r\n  const response = await axiosInstance.delete(`/queues/${queueId}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Gửi thông tin bệnh nhân đến bác sĩ đã chỉ định\r\nexport const sendQueueToDoctor = async (queueId: string, token: string) => {\r\n  try {\r\n    const response = await axiosInstance.put(`/queues/${queueId}/send-to-doctor`, \r\n      {}, // Không cần gửi dữ liệu vì server sẽ lấy thông tin từ queueId\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error sending queue to doctor:\", error);\r\n    \r\n    // Log thêm chi tiết về lỗi để debug\r\n    if (error.response) {\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response data:', error.response.data);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Lấy danh sách bác sĩ từ API\r\nexport const getDoctors = async (token: string) => {\r\n  try {\r\n    // Kiểm tra token trước khi gửi request\r\n    if (!token) {\r\n      console.error('No authentication token provided for getDoctors request');\r\n      throw new Error('Authentication token is required');\r\n    }\r\n\r\n    // Log token để debug (chỉ hiện 10 ký tự đầu để đảm bảo an toàn)\r\n    console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\r\n\r\n    // Gọi API endpoint chuyên biệt cho bác sĩ\r\n    console.log('Fetching doctors using /users/doctors endpoint');\r\n    const response = await axiosInstance.get('/users/doctors', {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    \r\n    console.log(`Successfully fetched ${response.data.length} doctors using dedicated endpoint`);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('Error fetching doctors from API:', error.message);\r\n    \r\n    // Log thêm chi tiết về lỗi để debug\r\n    if (error.response) {\r\n      console.error('Response status:', error.response.status);\r\n      console.error('Response data:', error.response.data);\r\n    }\r\n    \r\n    // Nếu endpoint chuyên biệt không tồn tại, thử dùng cách thức khác\r\n    if (error.response && error.response.status === 404) {\r\n      console.warn('The /users/doctors endpoint may not exist yet, falling back to filtering all users');\r\n      try {\r\n        // Thử lấy tất cả người dùng rồi lọc\r\n        const allUsers = await axiosInstance.get('/users', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        \r\n        const doctors = allUsers.data.filter((user: any) => user.role === 'DOCTOR');\r\n        console.log(`Successfully fetched ${doctors.length} doctors by filtering all users`);\r\n        return doctors;\r\n      } catch (fallbackError: any) {\r\n        console.error('Failed to fetch doctors using fallback method:', fallbackError);\r\n        throw fallbackError;\r\n      }\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n};\r\n\r\n// Prescription API methods\r\nexport const createPrescription = async (prescriptionData: any, token: string) => {\r\n  console.log('API Call: createPrescription with data:', JSON.stringify(prescriptionData, null, 2));\r\n  try {\r\n    const response = await axiosInstance.post('/prescriptions', prescriptionData, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('API Response: createPrescription success:', response.data);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('API Error: createPrescription failed:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getPrescriptions = async (queryParams: { patientId?: string, doctorId?: string, status?: string } = {}, token: string) => {\r\n  console.log('API Call: getPrescriptions with params:', queryParams);\r\n  console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\r\n  try {\r\n    const response = await axiosInstance.get('/prescriptions', {\r\n      params: queryParams,\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log(`API Response: Found ${response.data.length} prescriptions`);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('API Error: getPrescriptions failed:', error.response?.data || error.message);\r\n    console.error('Error response status:', error.response?.status);\r\n    console.error('Error response headers:', error.response?.headers);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Helper function specifically for pharmacy to get pending prescriptions\r\nexport const getPendingDispensePrescriptions = async (token: string) => {\r\n  return getPrescriptions({ status: 'PENDING_DISPENSE' }, token);\r\n};\r\n\r\nexport const getPrescriptionById = async (prescriptionId: string, token: string) => {\r\n  const response = await axiosInstance.get(`/prescriptions/${prescriptionId}`, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const updatePrescriptionStatus = async (prescriptionId: string, status: string, token: string) => {\r\n  const response = await axiosInstance.put(`/prescriptions/${prescriptionId}`, { status }, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Prescription Detail API methods\r\nexport const createPrescriptionDetail = async (prescriptionDetailData: any, token: string) => {\r\n  const response = await axiosInstance.post('/prescriptiondetails', prescriptionDetailData, {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n\r\n// Create multiple prescription details in batch\r\nexport const createBatchPrescriptionDetails = async (prescriptionId: string, details: any[], token: string) => {\r\n  console.log('API Call: createBatchPrescriptionDetails with data:', {\r\n    prescriptionId,\r\n    details: JSON.stringify(details, null, 2)\r\n  });\r\n  try {\r\n    const response = await axiosInstance.post('/prescriptiondetails/batch', {\r\n      prescriptionId,\r\n      details\r\n    }, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log('API Response: createBatchPrescriptionDetails success:', response.data);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('API Error: createBatchPrescriptionDetails failed:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getPrescriptionDetails = async (prescriptionId: string, token: string) => {\r\n  console.log(`API Call: getPrescriptionDetails for prescriptionId: ${prescriptionId}`);\r\n  console.log('Using token (first 10 chars):', token.substring(0, 10) + '...');\r\n  try {\r\n    const response = await axiosInstance.get('/prescriptiondetails', {\r\n      params: { prescriptionId },\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    console.log(`API Response: Found ${response.data.length} prescription details`);\r\n    if (response.data.length > 0) {\r\n      console.log('First prescription detail sample:', {\r\n        id: response.data[0]._id,\r\n        prescriptionId: response.data[0].prescriptionId,\r\n        medicineId: response.data[0].medicineId,\r\n        quantity: response.data[0].quantity,\r\n        dosage: response.data[0].dosage\r\n      });\r\n    }\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('API Error: getPrescriptionDetails failed:', error.response?.data || error.message);\r\n    console.error('Error response status:', error.response?.status);\r\n    console.error('Error response headers:', error.response?.headers);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Deduct medicine quantity from inventory\r\nexport const deductMedicineStock = async (medicineId: string, quantity: number, token: string) => {\r\n  console.log(`API Call: Deducting ${quantity} units from medicine ID: ${medicineId}`);\r\n  try {\r\n    // Đầu tiên lấy thông tin hiện tại của thuốc\r\n    const medicine = await getMedicineById(medicineId, token);\r\n    \r\n    if (!medicine) {\r\n      throw new Error(`Medicine with ID ${medicineId} not found`);\r\n    }\r\n    \r\n    // Kiểm tra số lượng hợp lệ\r\n    if (medicine.totalPills < quantity) {\r\n      console.warn(`Warning: Attempting to deduct ${quantity} pills but only ${medicine.totalPills} available`);\r\n      // Trong trường hợp thực tế, bạn có thể muốn ném lỗi ở đây\r\n    }\r\n    \r\n    // Tính toán số lượng mới\r\n    const newQuantity = Math.max(0, medicine.totalPills - quantity);\r\n    \r\n    // Cập nhật số lượng thuốc\r\n    const response = await axiosInstance.put(`/medicines/${medicineId}`, \r\n      { totalPills: newQuantity }, \r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      }\r\n    );\r\n    \r\n    console.log(`API Success: Updated medicine ${medicine.name}, new quantity: ${newQuantity}`);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error('API Error: deductMedicineStock failed:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Tính doanh thu từ đơn thuốc đã phát\r\nexport const calculateRevenue = async (token: string, startDate?: string, endDate?: string) => {\r\n  console.log(`API Call: calculateRevenue from ${startDate || 'all time'} to ${endDate || 'now'}`);\r\n  try {\r\n    const params: any = { status: 'DISPENSED' };\r\n    \r\n    if (startDate) params.startDate = startDate;\r\n    if (endDate) params.endDate = endDate;\r\n    \r\n    const response = await axiosInstance.get('/prescriptions/revenue', {\r\n      params,\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    \r\n    console.log(`API Response: Revenue calculation successful`);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(`API Error: calculateRevenue failed:`, error.response?.data || error.message);\r\n    console.error('Error response status:', error.response?.status);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Tính doanh thu theo năm\r\nexport const calculateYearlyRevenue = async (token: string, year: string) => {\r\n  console.log(`API Call: calculateYearlyRevenue for year: ${year}`);\r\n  try {\r\n    const startDate = `${year}-01-01`;\r\n    const endDate = `${year}-12-31`;\r\n    \r\n    const response = await calculateRevenue(token, startDate, endDate);\r\n    return response;\r\n  } catch (error: any) {\r\n    console.error(`API Error: calculateYearlyRevenue failed for year ${year}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Tính doanh thu chi tiết từ một đơn thuốc cụ thể\r\nexport const calculatePrescriptionRevenue = async (prescriptionId: string, token: string) => {\r\n  console.log(`API Call: calculatePrescriptionRevenue for id: ${prescriptionId}`);\r\n  try {\r\n    const response = await axiosInstance.get(`/prescriptions/${prescriptionId}/revenue`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n    \r\n    console.log(`API Response: Prescription revenue calculation successful`);\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(`API Error: calculatePrescriptionRevenue failed for id ${prescriptionId}:`, error.response?.data || error.message);\r\n    console.error('Error response status:', error.response?.status);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 782, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/danny/Desktop/EnSoft/File%20B%C3%A0i%20T%E1%BA%ADp/%C4%91%E1%BB%93%20%C3%A1n%20th%E1%BB%B1c%20t%E1%BA%ADp%20l%E1%BA%ADp%20tr%C3%ACnh%20A/hospitality-website/my-app/src/app/context/AuthContext.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, UserRole } from '../datats/auth';\r\nimport Cookies from 'js-cookie';\r\nimport { login as apiLogin, validateToken } from '../services/api.service';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  token: string | null;  // Added token property\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  refreshToken: () => Promise<boolean>; // Thêm hàm refresh token\r\n  validateCurrentToken: () => Promise<boolean>; // Thêm hàm kiểm tra token hiện tại\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [token, setToken] = useState<string | null>(null); // Added token state\r\n\r\n  useEffect(() => {\r\n    // Check for existing session\r\n    const storedUser = Cookies.get('user');\r\n    const storedToken = Cookies.get('token'); // Get stored token\r\n    \r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setUser(parsedUser);\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        Cookies.remove('user');\r\n      }\r\n    }\r\n    \r\n    // Set token from cookie if available\r\n    if (storedToken) {\r\n      setToken(storedToken);\r\n    }\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      console.log('AuthContext - Login attempt:', email);\r\n      const data = await apiLogin(email, password);\r\n      console.log('AuthContext - Login response data:', data);\r\n      \r\n      // Tách token và thông tin người dùng\r\n      const { token: authToken, ...userData } = data;\r\n      \r\n      // Đảm bảo role là chuỗi và được lưu dưới dạng chữ hoa để nhất quán\r\n      if (userData.role) {\r\n        console.log('AuthContext - Original role:', userData.role);\r\n        const normalizedRole = typeof userData.role === 'string' \r\n          ? userData.role.toUpperCase() \r\n          : userData.role;\r\n        \r\n        userData.role = normalizedRole;\r\n        console.log('AuthContext - Normalized role:', userData.role);\r\n      }\r\n      \r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n      setToken(authToken); // Save token to state\r\n\r\n      console.log('AuthContext - Setting user cookie with data:', userData);\r\n      // Lưu thông tin người dùng và token vào cookie riêng biệt\r\n      Cookies.set('user', JSON.stringify(userData), { expires: 1 });\r\n      if (authToken) {\r\n        Cookies.set('token', authToken, { expires: 1 });\r\n      }\r\n    } catch (error) {\r\n      console.error('AuthContext - Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    setToken(null); // Clear token\r\n    // Xóa cả hai cookie khi đăng xuất\r\n    Cookies.remove('user');\r\n    Cookies.remove('token');\r\n  };\r\n\r\n  // Hàm để làm mới token khi token hiện tại không hợp lệ\r\n  const refreshToken = async () => {\r\n    console.log('AuthContext - Attempting to refresh token');\r\n    // Trong triển khai thực tế, bạn sẽ gọi endpoint refresh-token của API\r\n    // Hiện tại chúng ta chỉ kiểm tra nếu user object còn tồn tại\r\n    \r\n    if (user && user.email) {\r\n      try {\r\n        // Giả lập request refresh token bằng cách đăng nhập lại\r\n        // Trong thực tế sẽ là gọi API refresh-token\r\n        console.log('Would call refresh token API here with existing user:', user.email);\r\n        return true;\r\n      } catch (error) {\r\n        console.error('AuthContext - Token refresh error:', error);\r\n        // Đăng xuất người dùng nếu không thể làm mới token\r\n        logout();\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const validateCurrentToken = async () => {\r\n    const storedToken = Cookies.get('token');\r\n    if (!storedToken) {\r\n      setIsAuthenticated(false);\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const tokenStatus = await validateToken(storedToken);\r\n      const isValid = tokenStatus.valid;\r\n      setIsAuthenticated(isValid);\r\n      return isValid;\r\n    } catch (error) {\r\n      console.error('AuthContext - Token validation error:', error);\r\n      setIsAuthenticated(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isAuthenticated, token, login, logout, refreshToken, validateCurrentToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}