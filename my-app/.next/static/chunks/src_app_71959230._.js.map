{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/services/axios.customize.service.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // Đổi lại nếu BE chạy port khác hoặc deploy\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  withCredentials: true, // Nếu BE dùng cookie/session\r\n});\r\n\r\nexport default axiosInstance;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,wIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACjC,SAAS;IACT,SAAS;QACP,gBAAgB;IAClB;IACA,iBAAiB;AACnB;uCAEe","debugId":null}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/services/api.service.ts"],"sourcesContent":["import axiosInstance from './axios.customize.service';\r\n\r\n// Đăng nhập\r\nexport const login = async (email: string, password: string) => {\r\n  const response = await axiosInstance.post('/users/login', { email, password });\r\n  return response.data;\r\n};\r\n\r\n// Lấy danh sách thuốc (cần token)\r\nexport const getMedicines = async (token: string) => {\r\n  const response = await axiosInstance.get('/medicines', {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return response.data;\r\n};\r\n"],"names":[],"mappings":";;;;AAAA;;AAGO,MAAM,QAAQ,OAAO,OAAe;IACzC,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,IAAI,CAAC,gBAAgB;QAAE;QAAO;IAAS;IAC5E,OAAO,SAAS,IAAI;AACtB;AAGO,MAAM,eAAe,OAAO;IACjC,MAAM,WAAW,MAAM,0JAAA,CAAA,UAAa,CAAC,GAAG,CAAC,cAAc;QACrD,SAAS;YACP,eAAe,CAAC,OAAO,EAAE,OAAO;QAClC;IACF;IACA,OAAO,SAAS,IAAI;AACtB","debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///D:/Codes/Projects/hospitalityWeb/hospitality-website/my-app/src/app/context/AuthContext.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { User, UserRole } from '../datats/auth';\r\nimport Cookies from 'js-cookie';\r\nimport { login as apiLogin } from '../services/api.service';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check for existing session\r\n    const storedUser = Cookies.get('user');\r\n    if (storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setUser(parsedUser);\r\n        setIsAuthenticated(true);\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        Cookies.remove('user');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    try {\r\n      console.log('AuthContext - Login attempt:', email);\r\n      const data = await apiLogin(email, password);\r\n      console.log('AuthContext - Login response data:', data);\r\n      \r\n      // Tách token và thông tin người dùng\r\n      const { token, ...userData } = data;\r\n      \r\n      // Xử lý role để đảm bảo nhất quán\r\n      if (userData.role) {\r\n        console.log('AuthContext - Original role:', userData.role);\r\n        \r\n        // Đảm bảo role là chuỗi và được lưu dưới dạng chữ hoa để nhất quán\r\n        const normalizedRole = typeof userData.role === 'string' \r\n          ? userData.role.toUpperCase() \r\n          : userData.role;\r\n        \r\n        userData.role = normalizedRole;\r\n        console.log('AuthContext - Normalized role:', userData.role);\r\n      }\r\n      \r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n\r\n      console.log('AuthContext - Setting user cookie with data:', userData);\r\n      // Lưu thông tin người dùng và token vào cookie riêng biệt\r\n      Cookies.set('user', JSON.stringify(userData), { expires: 1 });\r\n      if (token) {\r\n        Cookies.set('token', token, { expires: 1 });\r\n      }\r\n    } catch (error) {\r\n      console.error('AuthContext - Login error:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    // Xóa cả hai cookie khi đăng xuất\r\n    Cookies.remove('user');\r\n    Cookies.remove('token');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isAuthenticated, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}"],"names":[],"mappings":";;;;;AAEA;AAEA;AACA;;;AALA;;;;AAcA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,iBAAiB,mBAAmB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAEvD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,6BAA6B;YAC7B,MAAM,aAAa,wJAAA,CAAA,UAAO,CAAC,GAAG,CAAC;YAC/B,IAAI,YAAY;gBACd,IAAI;oBACF,MAAM,aAAa,KAAK,KAAK,CAAC;oBAC9B,QAAQ;oBACR,mBAAmB;gBACrB,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,8BAA8B;oBAC5C,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;gBACjB;YACF;QACF;iCAAG,EAAE;IAEL,MAAM,QAAQ,OAAO,OAAe;QAClC,IAAI;YACF,QAAQ,GAAG,CAAC,gCAAgC;YAC5C,MAAM,OAAO,MAAM,CAAA,GAAA,2IAAA,CAAA,QAAQ,AAAD,EAAE,OAAO;YACnC,QAAQ,GAAG,CAAC,sCAAsC;YAElD,qCAAqC;YACrC,MAAM,EAAE,KAAK,EAAE,GAAG,UAAU,GAAG;YAE/B,kCAAkC;YAClC,IAAI,SAAS,IAAI,EAAE;gBACjB,QAAQ,GAAG,CAAC,gCAAgC,SAAS,IAAI;gBAEzD,mEAAmE;gBACnE,MAAM,iBAAiB,OAAO,SAAS,IAAI,KAAK,WAC5C,SAAS,IAAI,CAAC,WAAW,KACzB,SAAS,IAAI;gBAEjB,SAAS,IAAI,GAAG;gBAChB,QAAQ,GAAG,CAAC,kCAAkC,SAAS,IAAI;YAC7D;YAEA,QAAQ;YACR,mBAAmB;YAEnB,QAAQ,GAAG,CAAC,gDAAgD;YAC5D,0DAA0D;YAC1D,wJAAA,CAAA,UAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,SAAS,CAAC,WAAW;gBAAE,SAAS;YAAE;YAC3D,IAAI,OAAO;gBACT,wJAAA,CAAA,UAAO,CAAC,GAAG,CAAC,SAAS,OAAO;oBAAE,SAAS;gBAAE;YAC3C;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,MAAM;QACR;IACF;IAEA,MAAM,SAAS;QACb,QAAQ;QACR,mBAAmB;QACnB,kCAAkC;QAClC,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;QACf,wJAAA,CAAA,UAAO,CAAC,MAAM,CAAC;IACjB;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAiB;YAAO;QAAO;kBACjE;;;;;;AAGP;GArEgB;KAAA;AAuET,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}}]
}